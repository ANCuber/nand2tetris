/* 
 ix must be over 7
 iy must be over 6
*/

<<<<<<< HEAD:Rocket2.jack
class Rocket2 {
	field int x, y;
=======
class Rocket {
field int x, y, cl_or_ccl, i;
	field Array cos, sin;
>>>>>>> main:Rocket.jack

	constructor Rocket2 new (int ix, int iy) {
		let x = ix;
		let y = iy;
		let cl_or_ccl = 0;
		let i = 0;
		return this;
	}

	method int getx() {
		return x;
	}
	method int gety() {
		return y;
	}
	method int getAngle() {
		// to get angle
		return (i)*(cl_or_ccl);
	}

	method void updatePos (int ix, int iy) {
		let x = ix;
		let y = iy;
		return;
	}
<<<<<<< HEAD:Rocket2.jack

	method void drawRocket2 () {
		//mid
		do Screen.drawPixel(0 + x, -8 + y);
		do Screen.drawLine(-4 + x, -4 + y, 4 + x, -4 + y);
		do Screen.drawPixel(0 + x, 6 + y);
		do Screen.drawPixel(0 + x, 7 + y);

		//right
		do Screen.drawPixel(1 + x, -7 + y);
		do Screen.drawPixel(1 + x, -6 + y);
		do Screen.drawPixel(2 + x, -6 + y);
		do Screen.drawPixel(3 + x, -5 + y);
		do Screen.drawLine(5 + x, -3 + y, 5 + x, 0 + y);
		do Screen.drawRectangle(3 + x, 0 + y, 4 + x, 2 + y);
		do Screen.drawCircle(6 + x, 1 + y, 2);
		do Screen.setColor(0);
		do Screen.drawCircle(6 + x, 1 + y, 1);
		do Screen.setColor(1);
		do Screen.drawPixel(5 + x, 3 + y);
		do Screen.drawPixel(6 + x, 4 + y);
		do Screen.drawLine(3 + x, 3 + y, 3 + x, 9 + y);
		do Screen.drawLine(5 + x, 5 + y, 5 + x, 6 + y);
		do Screen.drawLine(4 + x, 7 + y, 4 + x, 8 + y);
		do Screen.drawPixel(6 + x, 7 + y);
		do Screen.drawPixel(7 + x, 8 + y);
		do Screen.drawLine(8 + x, 9 + y, 9 + x, 9 + y);
		do Screen.drawPixel(2 + x, 3 + y);
		do Screen.drawLine(1 + x, 4 + y, 1 + x, 5 + y);

		//left
		do Screen.drawPixel(-1 + x, -7 + y);
		do Screen.drawPixel(-1 + x, -6 + y);
		do Screen.drawPixel(-2 + x, -6 + y);
		do Screen.drawPixel(-3 + x, -5 + y);
		do Screen.drawLine(-5 + x, -3 + y, -5 + x, 0 + y);
		do Screen.drawRectangle(-4 + x, 0 + y, -3 + x, 2 + y);
		do Screen.drawCircle(-6 + x, 1 + y, 2);
		do Screen.setColor(0);
		do Screen.drawCircle(-6 + x, 1 + y, 1);
		do Screen.setColor(1);
		do Screen.drawPixel(-5 + x, 3 + y);
		do Screen.drawPixel(-6 + x, 4 + y);
		do Screen.drawLine(-3 + x, 3 + y, -3 + x, 9 + y);
		do Screen.drawLine(-5 + x, 5 + y, -5 + x, 6 + y);
		do Screen.drawLine(-4 + x, 7 + y, -4 + x, 8 + y);
		do Screen.drawPixel(-6 + x, 7 + y);
		do Screen.drawPixel(-7 + x, 8 + y);
		do Screen.drawLine(-8 + x, 9 + y, -9 + x, 9 + y);
		do Screen.drawPixel(-2 + x, 3 + y);
		do Screen.drawLine(-1 + x, 4 + y, -1 + x, 5 + y);
=======
	method void decreaseAngle() {
		if((i = 15) & (cl_or_ccl = -1)){
			let i = 15;
		}else {
			if(i = 0) {
				let cl_or_ccl = -1;
			}
			if(cl_or_ccl = 1) {
				let i = i - 1;
			}else {
				let i = i + 1;
			}
		}
>>>>>>> main:Rocket.jack
		return;
	}
	method void increaseAngle() {
		if((i = 15) & (cl_or_ccl = 1)){
			let i = 15;
		}else {
			if(i = 0){
				let cl_or_ccl = 1;
			}
			if(cl_or_ccl = -1){
				let i = i - 1;
			}else {
				let i = i + 1;
			}
		}
		return;
	}

	method void drawRocket (boolean color) {
		do Screen.setColor(color); // true for black and zero for white;
		let cos = Array.new(16);
		let sin = Array.new(16);
		let cos[0] = 100;
		let cos[1] = 99;
		let cos[2] = 97;
		let cos[3] = 95;
		let cos[4] = 91;
		let cos[5] = 86;
		let cos[6] = 80;
		let cos[7] = 74;
		let cos[8] = 66;
		let cos[9] = 58;
		let cos[10] = 50;
		let cos[11] = 40;
		let cos[12] = 30;
		let cos[13] = 20;
		let cos[14] = 10;
		let cos[15] = 0;
		let sin[0] = 0 * cl_or_ccl;
		let sin[1] = 10 * cl_or_ccl;
		let sin[2] = 20 * cl_or_ccl;
		let sin[3] = 30 * cl_or_ccl;
		let sin[4] = 40 * cl_or_ccl;
		let sin[5] = 50 * cl_or_ccl;
		let sin[6] = 58 * cl_or_ccl;
		let sin[7] = 66 * cl_or_ccl;
		let sin[8] = 74 * cl_or_ccl;
		let sin[9] = 80 * cl_or_ccl;
		let sin[10] = 86 * cl_or_ccl;
		let sin[11] = 91 * cl_or_ccl;
		let sin[12] = 95 * cl_or_ccl;
		let sin[13] = 97 * cl_or_ccl;
		let sin[14] = 99 * cl_or_ccl;
		let sin[15] = 100 * cl_or_ccl;


		//mid
		do Screen.drawPixel(0 * cos[i] + (6 * sin[i]) / 100 + x, 0 * sin[i] - (6 * cos[i]) / 100 + y); //(0, -6)
		do Screen.drawLine(-3 * cos[i] + (3 * sin[i]) / 100+ x, -3 * sin[i] - (3 * cos[i]) / 100 + y, 3 * cos[i] + (3 * sin[i]) / 100 + x, 3 * sin[i] - (3 * cos[i]) / 100 + y); //(+-3, -3)
		do Screen.drawPixel(0 * cos[i] - (3 * sin[i]) / 100 + x, 0 * sin[i] + (3 * cos[i]) / 100 + y); //(0, 3)
		do Screen.drawPixel(0 * cos[i] - (4 * sin[i]) / 100 + x, 0 * sin[i] + (4 * cos[i]) / 100 + y); //(0, 4)

		//right
		do Screen.drawPixel(1 * cos[i] + (5 * sin[i]) / 100 + x, 1 * sin[i] - (5 * cos[i]) / 100 + y); //(1, -5)
		do Screen.drawPixel(2 * cos[i] + (4 * sin[i]) / 100 + x, 2 * sin[i] - (4 * cos[i]) / 100 + y); //(2, -4)
		do Screen.drawLine(4 * cos[i] + (2 * sin[i]) / 100 + x, 4 * sin[i] - (2 * cos[i]) / 100 + y, 4 * cos[i] + (0 * sin[i]) / 100 + x, 4 * sin[i] + (0 * cos[i]) / 100 + y); 
		//(4, -2 0)
		do Screen.drawLine(2 * cos[i] - (0 * sin[i]) / 100 + x, 2 * sin[i] + (0 * cos[i]) / 100 + y, 2 * cos[i] - (1 * sin[i]) / 100 + x, 2 * sin[i] + (1 * cos[i]) / 100 + y); 
		//(2, 0 1)
		do Screen.drawLine(3 * cos[i] - (0 * sin[i]) / 100 + x, 3 * sin[i] + (0 * cos[i]) / 100 + y, 3 * cos[i] - (1 * sin[i]) / 100 + x, 3 * sin[i] + (1 * cos[i]) / 100 + y); 
		//(3, 0 1)
		do Screen.drawLine(2 * cos[i] - (2 * sin[i]) / 100 + x, 2 * sin[i] + (2 * cos[i]) / 100 + y, 2 * cos[i] - (6 * sin[i]) / 100 + x, 2 * sin[i] + (6 * cos[i]) / 100 + y); 
		//(2, 2 6)
		do Screen.drawLine(4 * cos[i] - (2 * sin[i]) / 100 + x, 4 * sin[i] + (2 * cos[i]) / 100 + y, 4 * cos[i] - (4 * sin[i]) / 100 + x, 4 * sin[i] + (4 * cos[i]) / 100 + y); 
		//(4, 2 4)
		do Screen.drawLine(3 * cos[i] - (4 * sin[i]) / 100 + x, 3 * sin[i] + (4 * cos[i]) / 100 + y, 3 * cos[i] - (5 * sin[i]) / 100 + x, 3 * sin[i] + (5 * cos[i]) / 100 + y); 
		//(3, 4 5)
		do Screen.drawPixel(5 * cos[i] - (1 * sin[i]) / 100 + x, 5 * sin[i] + (1 * cos[i]) / 100 + y); //(5, 1)
		do Screen.drawPixel(5 * cos[i] - (5 * sin[i]) / 100 + x, 5 * sin[i] + (5 * cos[i]) / 100 + y); //(5, 5)
		do Screen.drawPixel(1 * cos[i] - (2 * sin[i]) / 100 + x, 1 * sin[i] + (2 * cos[i]) / 100 + y); //(1, 2)
		do Screen.drawLine(6 * cos[i] - (6 * sin[i]) / 100 + x, 6 * sin[i] + (6 * cos[i]) / 100 + y, 7 * cos[i] - (6 * sin[i]) / 100 + x, 7 * sin[i] + (6 * cos[i]) / 100 + y); 
		//(6 7, 6)


		//left
		do Screen.drawPixel(-1 * cos[i] + (5 * sin[i]) / 100 + x, -1 * sin[i] - (5 * cos[i]) / 100 + y); //(-1, -5)
		do Screen.drawPixel(-2 * cos[i] + (4 * sin[i]) / 100 + x, -2 * sin[i] - (4 * cos[i]) / 100 + y); //(-2, -4)
		do Screen.drawLine(-4 * cos[i] + (2 * sin[i]) / 100 + x, -4 * sin[i] - (2 * cos[i]) / 100 + y, -4 * cos[i] + (0 * sin[i]) / 100 + x, -4 * sin[i] + (0 * cos[i]) / 100 + y); 
		//(-4, -2 0)
		do Screen.drawLine(-2 * cos[i] - (0 * sin[i]) / 100 + x, -2 * sin[i] + (0 * cos[i]) / 100 + y, -2 * cos[i] - (1 * sin[i]) / 100 + x, -2 * sin[i] + (1 * cos[i]) / 100 + y); 
		//(-2, 0 1)
		do Screen.drawLine(-3 * cos[i] - (0 * sin[i]) / 100 + x, -3 * sin[i] + (0 * cos[i]) / 100 + y, -3 * cos[i] - (1 * sin[i]) / 100 + x, -3 * sin[i] + (1 * cos[i]) / 100 + y); 
		//(-3, 0 1)
		do Screen.drawLine(-2 * cos[i] - (2 * sin[i]) / 100 + x, -2 * sin[i] + (2 * cos[i]) / 100 + y, -2 * cos[i] - (6 * sin[i]) / 100 + x, -2 * sin[i] + (6 * cos[i]) / 100 + y); 
		//(-2, 2 6)
		do Screen.drawLine(-4 * cos[i] - (2 * sin[i]) / 100 + x, -4 * sin[i] + (2 * cos[i]) / 100 + y, -4 * cos[i] - (4 * sin[i]) / 100 + x, -4 * sin[i] + (4 * cos[i]) / 100 + y); 
		//(-4, 2 4)
		do Screen.drawLine(-3 * cos[i] - (4 * sin[i]) / 100 + x, -3 * sin[i] + (4 * cos[i]) / 100 + y, -3 * cos[i] - (5 * sin[i]) / 100 + x, -3 * sin[i] + (5 * cos[i]) / 100 + y); 
		//(-3, 4 5)
		do Screen.drawPixel(-5 * cos[i] - (1 * sin[i]) / 100 + x, -5 * sin[i] + (1 * cos[i]) / 100 + y); //(-5, 1)
		do Screen.drawPixel(-5 * cos[i] - (5 * sin[i]) / 100 + x, -5 * sin[i] + (5 * cos[i]) / 100 + y); //(-5, 5)
		do Screen.drawPixel(-1 * cos[i] - (2 * sin[i]) / 100 + x, -1 * sin[i] + (2 * cos[i]) / 100 + y); //(-1, 2)
		do Screen.drawLine(-6 * cos[i] - (6 * sin[i]) / 100 + x, -6 * sin[i] + (6 * cos[i]) / 100 + y, -7 * cos[i] - (6 * sin[i]) / 100 + x, -7 * sin[i] + (6 * cos[i]) / 100 + y); 
		//(-6 -7, 6)
		return;
	}
} 
