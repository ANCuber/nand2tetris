/* 
 ix must be over 9
 iy must be over 8
*/

class Rocket2 {
	field int x, y;


	constructor Rocket2 new (int ix, int iy) {
		let x = ix;
		let y = iy;
		return this;
	}

	method void changePos (int ix, int iy) {
		let x = ix;
		let y = iy;
		return;
	}

	method void drawRocket2 () {
		//rotate
		var int cl_or_ccl;
		var Array cos, sin;
		var int i;

		let cl_or_ccl = 0;
		let i = 0;
		let cos = Array.new(16);
		let sin = Array.new(16);

		let cos[0] = 100;let cos[1] = 99;
		let cos[2] = 97;
		let cos[3] = 95;
		let cos[4] = 91;
		let cos[5] = 86;
		let cos[6] = 80;
		let cos[7] = 74;
		let cos[8] = 66;
		let cos[9] = 58;
		let cos[10] = 50;
		let cos[11] = 40;
		let cos[12] = 30;
		let cos[13] = 20;
		let cos[14] = 10;
		let cos[15] = 0;

		while(true){
			if(Keyboard.keyPressed() = 130){
				if((i = 15) & (cl_or_ccl = -1)){
					let i = 15;
				}
				else{
					if(i = 0){
						let cl_or_ccl = -1;
					}
					if(cl_or_ccl = 1){
						let i = i - 1;
					}
					else{
						let i = i + 1;
					}
				}
			}
			else{
				if(Keyboard.keyPressed() = 132){
					if((i = 15) & (cl_or_ccl = 1)){
						let i = 15;
					}
					else{
						if(i = 0){
							let cl_or_ccl = 1;
						}
						if(cl_or_ccl = -1){
							let i = i - 1;
						}
						else{
							let i = i + 1;
						}
					}
				}
			}



			let sin[0] = 0 * cl_or_ccl;
			let sin[1] = 10 * cl_or_ccl;
			let sin[2] = 20 * cl_or_ccl;
			let sin[3] = 30 * cl_or_ccl;
			let sin[4] = 40 * cl_or_cc;
			let sin[5] = 50 * cl_or_ccl;
			let sin[6] = 58 * cl_or_ccl;
			let sin[7] = 66 * cl_or_ccl;
			let sin[8] = 74 * cl_or_ccl;
			let sin[9] = 80 * cl_or_ccl;
			let sin[10] = 86 * cl_or_ccl;
			let sin[11] = 91 * cl_or_ccl;
			let sin[12] = 95 * cl_or_ccl;
			let sin[13] = 97 * cl_or_ccl;
			let sin[14] = 99 * cl_or_ccl;
			let sin[15] = 100 * cl_or_ccl;
	
			//mid
			do Screen.drawPixel(0 * cos[i] + (8 * sin[i]) / 100 + x, 0 * sin[i] - (8 * cos[i]) / 100 + y); //(0, -8)
			do Screen.drawLine(-4 * cos[i] + (4 * sin[i]) / 100 + x, -4 * sin[i] - (4 * cos[i]) / 100  + y, 4 * cos[i] + (4 * sin[i]) / 100 + x, 4 * sin[i] - (4 * cos[i]) / 100 + y);
			//(+-4, -4)
			do Screen.drawPixel(0 * cos[i] - (6 * sin[i]) / 100 + x, 0 * sin[i] + (6 * cos[i]) / 100 + y); //(0, 6)
			do Screen.drawPixel(0 * cos[i] - (7 * sin[i]) / 100 + x, 0 * sin[i] + (7 * cos[i]) / 100 + y); //(0, 7)

			//right
			do Screen.drawPixel(1 * cos[i] + (7 * sin[i]) / 100 + x, 1 * sin[i] - (7 * cos[i]) / 100 + y); //(1, -7)
			do Screen.drawPixel(1 * cos[i] + (6 * sin[i]) / 100 + x, 1 * sin[i] - (6 * cos[i]) / 100 + y); //(1, -6)
			do Screen.drawPixel(2 * cos[i] + (6 * sin[i]) / 100 + x, 2 * sin[i] - (6 * cos[i]) / 100 + y); //(2, -6)
			do Screen.drawPixel(3 * cos[i] + (5 * sin[i]) / 100 + x, 3 * sin[i] - (5 * cos[i]) / 100 + y); //(3, -5)
			do Screen.drawLine(5 * cos[i] + (3 * sin[i]) / 100 + x, 5 * sin[i] - (3 * cos[i]) / 100 + y, 5 * cos[i] - (0 * sin[i]) / 100 + x, 5 * sin[i] + (0 * cos[i]) / 100 + y);
			//(5, -3 0)
			do Screen.drawLine(4 * cos[i] - (0 * sin[i]) / 100 + x, 4 * sin[i] + (0 * cos[i]) / 100 + y, 4 * cos[i] - (2 * sin[i]) / 100 + x, 4 * sin[i] + (2 * 	cos[i]) / 100 + y);
			//(4, 0 2)
			do Screen.drawLine(3 * cos[i] - (0 * sin[i]) / 100 + x, 3 * sin[i] + (0 * cos[i]) / 100 + y, 3 * cos[i] - (2 * sin[i]) / 100 + x, 3 * sin[i] + (2 * cos[i]) / 100 + y);
			//(3, 0 2)
			do Screen.drawCircle(6 * cos[i] - (1 * sin[i]) / 100 + x, 6 * sin[i] + (1 * cos[i]) / 100 + y, 2); //(6, 1)
			do Screen.setColor(0);
			do Screen.drawCircle(6 * cos[i] - (1 * sin[i]) / 100 + x, 6 * sin[i] + (1 * cos[i]) / 100 + y, 1); //(6, 1)
			do Screen.setColor(1);
			do Screen.drawPixel(5 * cos[i] - (3 * sin[i]) / 100 + x, 5 * sin[i] + (3 * cos[i]) / 100 + y); //(5, 3)
			do Screen.drawPixel(6 * cos[i] - (4 * sin[i]) / 100 + x, 6 * sin[i] + (4 * cos[i]) / 100 + y); //(6, 4)
			do Screen.drawLine(3 * cos[i] - (3 * sin[i]) / 100 + x, 3 * sin[i] + (3 * cos[i]) / 100 + y, 3 * cos[i] - (9 * sin[i]) / 100 + x, 3 * sin[i] + (9 * cos[i]) / 100 + y);
			//(3, 3 9)
			do Screen.drawLine(5 * cos[i] - (5 * sin[i]) / 100 + x, 5 * sin[i] + (5 * cos[i]) / 100 + y, 5 * cos[i] - (6 * sin[i]) / 100 + x, 5 * sin[i] + (6 * cos[i]) / 100 + y);
			//(5, 5 6)
			do Screen.drawLine(4 * cos[i] - (7 * sin[i]) / 100 + x, 4 * sin[i] + (7 * cos[i]) / 100 + y, 4 * cos[i] - (8 * sin[i]) / 100 + x, 4 * sin[i] + (8 * cos[i]) / 100 + y);
			//(4, 7 8)
			do Screen.drawPixel(6 * cos[i] - (7 * sin[i]) / 100 + x, 6 * sin[i] + (7 * cos[i]) / 100 + y); //(6, 7)
			do Screen.drawPixel(7 * cos[i] - (8 * sin[i]) / 100 + x, 7 * sin[i] + (8 * cos[i]) / 100 + y); //(7, 8)
			do Screen.drawLine(8 * cos[i] - (9 * sin[i]) / 100 + x, 8 * sin[i] + (9 * cos[i]) / 100 + y, 9 * cos[i] - (9 * sin[i]) / 100 + x, 9 * sin[i] + (9 * cos[i]) / 100 + y);
			//(8 9, 9)
			do Screen.drawPixel(2 * cos[i] - (3 * sin[i]) / 100 + x, 2 * sin[i] + (3 * cos[i]) / 100 + y); //(2 ,3)
			do Screen.drawLine(1 * cos[i] - (4 * sin[i]) / 100 + x, 1 * sin[i] + (4 * cos[i]) / 100 + y, 1 * cos[i] - (5 * sin[i]) / 100 + x, 1 * sin[i] + (5 * cos[i]) / 100 + y);
			//(1, 4 5)

			//left
			do Screen.drawPixel(-1 * cos[i] + (7 * sin[i]) / 100 + x, -1 * sin[i] - (7 * cos[i]) / 100  + y); //(-1, -7)
			do Screen.drawPixel(-1 * cos[i] + (6 * sin[i]) / 100 + x, -1 * sin[i] - (6 * cos[i]) / 100  + y); //(-1, -6)
			do Screen.drawPixel(-2 * cos[i] + (6 * sin[i]) / 100 + x, -2 * sin[i] - (6 * cos[i]) / 100  + y); //(-2, -6)
			do Screen.drawPixel(-3 * cos[i] + (5 * sin[i]) / 100 + x, -3 * sin[i] - (5 * cos[i]) / 100  + y); //(-3, -5)
			do Screen.drawLine(-5 * cos[i] + (3 * sin[i]) / 100 + x, -5 * sin[i] - (3 * cos[i]) / 100  + y, -5 * cos[i] - (0 * sin[i]) / 100+ x, -5 * sin[i] + (0 * cos[i]) / 100 + y);
			//(-5, -3 0)/ 100 
			do Screen.drawLine(-4 * cos[i] - (0 * sin[i]) / 100 + x, -4 * sin[i] + (0 * cos[i]) / 100  + y, -4 * cos[i] - (2 * sin[i]) / 100+ x, -4 * sin[i] + (2 * cos[i]) / 100 + y);
			//(-4, 0 2)
			do Screen.drawLine(-3 * cos[i] - (0 * sin[i]) / 100 + x, -3 * sin[i] + (0 * cos[i]) / 100  + y, -3 * cos[i] - (2 * sin[i]) / 100+ x, -3 * sin[i] + (2 * cos[i]) / 100 + y);
			//(-3, 0 2)
			do Screen.drawCircle(-6 * cos[i] - (1 * sin[i]) / 100 + x, -6 * sin[i] + (1 * cos[i]) / 100  + y, 2); //(-6, 1)
			do Screen.setColor(0);
			do Screen.drawCircle(-6 * cos[i] - (1 * sin[i]) / 100 + x, -6 * sin[i] + (1 * cos[i]) / 100  + y, 1); //(-6, 1)
			do Screen.setColor(1);
			do Screen.drawPixel(-5 * cos[i] - (3 * sin[i]) / 100 + x, -5 * sin[i] + (3 * cos[i]) / 100  + y); //(-5, 3)
			do Screen.drawPixel(-6 * cos[i] - (4 * sin[i]) / 100 + x, -6 * sin[i] + (4 * cos[i]) / 100  + y); //(-6, 4)
			do Screen.drawLine(-3 * cos[i] - (3 * sin[i]) / 100 + x, -3 * sin[i] + (3 * cos[i]) / 100  + y, -3 * cos[i] - (9 * sin[i]) / 100+ x, -3 * sin[i] + (9 * cos[i]) / 100 + y);
			//(-3, 3 9)
			do Screen.drawLine(-5 * cos[i] - (5 * sin[i]) / 100 + x, -5 * sin[i] + (5 * cos[i]) / 100  + y, -5 * cos[i] - (6 * sin[i]) / 100+ x, -5 * sin[i] + (6 * cos[i]) / 100 + y);
			//(-5, 5 6)
			do Screen.drawLine(-4 * cos[i] - (7 * sin[i]) / 100 + x, -4 * sin[i] + (7 * cos[i]) / 100  + y, -4 * cos[i] - (8 * sin[i]) / 100+ x, -4 * sin[i] + (8 * cos[i]) / 100 + y);
			//(-4, 7 8)
			do Screen.drawPixel(-6 * cos[i] - (7 * sin[i]) / 100 + x, -6 * sin[i] + (7 * cos[i]) / 100  + y); //(-6, 7)
			do Screen.drawPixel(-7 * cos[i] - (8 * sin[i]) / 100 + x, -7 * sin[i] + (8 * cos[i]) / 100  + y); //(-7, 8)
			do Screen.drawLine(-8 * cos[i] - (9 * sin[i]) / 100 + x, -8 * sin[i] + (9 * cos[i]) / 100  + y, -9 * cos[i] - (9 * sin[i]) / 100+ x, -9 * sin[i] + (9 * cos[i]) / 100 + y);
			//(-8 -9, 9)
			do Screen.drawPixel(-2 * cos[i] - (3 * sin[i]) / 100 + x, -2 * sin[i] + (3 * cos[i]) / 100  + y); //(-2 ,3)
			do Screen.drawLine(-1 * cos[i] - (4 * sin[i]) / 100 + x, -1 * sin[i] + (4 * cos[i]) / 100  + y, -1 * cos[i] - (5 * sin[i]) / 100+ x, -1 * sin[i] + (5 * cos[i]) / 100 + y);
			//(-1, 4 5)
			do Sys.wait(200);
			do Screen.clearScreen();
		}
		return;
	}
}