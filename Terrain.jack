/*
 Terrain
 Treat terrain as a class, not an object
 ----
 Always call Init(N,len,mxh) first to set a Terrain of N grounds, with length of len and maximal slope of mxh.
 Call Shifting(dS) to modify positions of the entire Terrain.
 Call checkCollision(x0, y0, rng) to check collisions (dis < rng).
*/

class Terrain {
    static int Nums, i, rand;
    static int x1, x2, y1, y2, cx, cy, xb, yb;
    static int abs, sqr, pdH;
    static Array arr;
    static Ground tmp;

    function void Init(int N, int mnlen, int mxh) { // initialize N grounds, with minimal length of len and maximal slope of mxh
        let Nums = N;
        let arr = Array.new(Nums+5);
        
        do Ground.Init(mnlen, mxh);
        
        // initializing
        let arr[0] = Ground.new(-500,254,1);// default going up for the first Ground
        let i = 1;
        while (i < Nums) { // 1 to N-1
            let tmp = arr[i-1];
            let xb = tmp.get_end_x();
            let yb = tmp.get_end_y();
            let pdH = tmp.get_dir();
            let arr[i] = Ground.new(xb,yb,pdH);

            let i = i+1;
        }

        // drawing
        let i = 0;
        while (i < Nums) {
            let tmp = arr[i];
            if ((tmp.get_str_x()>0) & (tmp.get_end_x()<511)) {
                do tmp.DrawOrClear(1);
            }

            let i = i+1;
        }

        do Screen.setColor(0);
        do Screen.drawRectangle(0,0,10,255);
        do Screen.drawRectangle(501,0,511,255);
        
        return;
    }
    
    function void Shifting(int dS) { // shift +dS along x axis
        let i = 0;
        while(i < Nums) {
            let tmp = arr[i];
            if ((tmp.get_str_x()>0) & (tmp.get_end_x()<511)) {
                do tmp.DrawOrClear(0);// clear
            }
            do tmp.upd_xs(dS);// update
            if ((tmp.get_str_x()>0) & (tmp.get_end_x()<511)) {
                do tmp.DrawOrClear(1);// draw
            }
            
            let i = i+1;
        }
        
        do Screen.setColor(0);
        do Screen.drawRectangle(0,0,10,255);
        do Screen.drawRectangle(501,0,511,255);

        return;
    }

    function int checkCollision(int x0, int y0, int rng) {// return 0 if no collision, 1 if colliding with horizontal grounds, -1 with slopes.
        let x1 = 0;
        let y1 = 0;

        let i = 0;
        while(i < Nums) {
            let tmp = arr[i];

            // relative
            let x2 = tmp.get_end_x()-tmp.get_str_x();
            let y2 = tmp.get_end_y()-tmp.get_str_y();
            let cx = x0-tmp.get_str_x();
            let cy = y0-tmp.get_str_y();
            
            // chech whether within the curret segment
            if ((-rng < cx) & (cx < (x2+rng)) & (((-rng < cy) & (cy < (y2+rng))) | ((rng > cy) & (cy > (y2-rng)))) ) {
                // dis(A, L) = |a*x0+b*y0+c|/sqrt(a^2+b^2)
                let abs = (x2*cy)-(y2*cx);
                let sqr = (x2*x2)+(y2*y2);

                if (abs < 0) {
                    let abs = -abs;
                }

                // collision happens
                if ((tmp.get_type() = 1) & ((abs*abs) < (sqr*rng*rng))) {
                    return -1;
                }
                if ((tmp.get_type() = 0) & ((abs*abs) < (sqr*rng*rng))) {
                    return 1;
                }
            }

            let i = i+1;
        }
        
        // no collision
        return 0;
    }
}